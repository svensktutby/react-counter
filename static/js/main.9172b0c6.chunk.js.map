{"version":3,"sources":["components/Scoreboard/Scoreboard.module.css","components/Input/Input.module.css","components/Setter/Setter.module.css","components/Scoreboard/Scoreboard.tsx","components/Button/Button.tsx","bus/types.ts","bus/action.ts","components/Counter/Counter.tsx","bus/reducer.ts","components/Input/Input.tsx","components/Setter/Setter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Scoreboard","className","alarm","error","activeCounter","children","restProps","scoreboardClassName","s","scoreboard","label","Button","buttonClassName","type","INCREMENT","RESET","SET_MIN_COUNTER","SET_MAX_COUNTER","SET_COUNTER","SET_ERROR","setErrorAC","Counter","state","dispatch","setterActive","counter","minCounter","maxCounter","increaseCounter","payload","incrementAC","resetCounter","counterClassName","disabled","onClick","initialState","reducer","action","increase","Input","onChange","onKeyPress","onChangeText","onEnter","title","inputClassName","e","currentTarget","value","key","Setter","useEffect","localStorage","setItem","JSON","stringify","setterClassName","setter","setMaxCounterAC","setMinCounterAC","App","localState","getItem","preloadedState","parse","useReducer","colClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,MAAQ,0BAA0B,MAAQ,0BAA0B,MAAQ,4B,oCCA1ID,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,uKCSdC,EAAsC,SAAC,GAQ7C,IAPLC,EAOI,EAPJA,UACAC,EAMI,EANJA,MACAC,EAKI,EALJA,MACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,SAEGC,EACC,wEACEC,EAAmB,UAAMC,IAAEC,WAAR,YAAsBP,EAAQM,IAAEN,MAAQ,GAAxC,YACvBD,GAAwB,IAG1B,OACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,wBAAf,SACIG,EAOA,4CAAIH,UAAWM,GAAyBD,GAAxC,aACGD,KAPHF,EACE,qBAAKF,UAAWO,IAAEL,MAAlB,8BAEA,qBAAKF,UAAWO,IAAEE,MAAlB,+CCrBCC,EAA8B,SAAC,GAIrC,IAHLV,EAGI,EAHJA,UAEGK,EACC,6BACEM,EAAe,cAAUX,GAAwB,eAEvD,OAAO,oCAAQY,KAAK,SAASZ,UAAWW,GAAqBN,K,gBChBlDQ,EAAY,YAMZC,EAAQ,QAKRC,EAAkB,kBAMlBC,EAAkB,kBAMlBC,EAAc,cAKdC,EAAY,YCElB,SAASC,EAAWjB,GACzB,MAAO,CAAEU,KAAMM,EAAWhB,SCjBrB,IAAMkB,EAAgC,SAAC,GAIvC,IAHLpB,EAGI,EAHJA,UACAqB,EAEI,EAFJA,MACAC,EACI,EADJA,SAEQC,EAAyDF,EAAzDE,aAAcrB,EAA2CmB,EAA3CnB,MAAOsB,EAAoCH,EAApCG,QAASC,EAA2BJ,EAA3BI,WAAYC,EAAeL,EAAfK,WAE5CC,EAAkB,SAACC,GACvBN,EDZG,SAAqBM,GAC1B,MAAO,CAAEhB,KAAMC,EAAWe,WCWfC,CAAYD,KAGjBE,EAAe,WACnBR,EDXK,CAAEV,KAAME,KCcTiB,EAAgB,UAAMxB,IAAEiB,QAAR,0BACpBxB,GAAwB,IAG1B,OACE,sBAAKA,UAAW+B,EAAhB,UACE,qBAAK/B,UAAU,UAAf,SACE,cAAC,EAAD,CACEC,MAAOuB,GAAWE,EAClBvB,eAAgBoB,EAChBrB,MAAOA,EAHT,SAKGsB,MAGL,oBAAIxB,UAAU,eACd,sBAAKA,UAAU,+BAAf,UACE,cAAC,EAAD,CACEA,UAAU,gBACVgC,SAAUR,GAAWE,GAAcH,EACnCU,QAAS,kBAAMN,EAAgB,IAHjC,uBAOA,cAAC,EAAD,CACE3B,UAAU,gBACVgC,SAAUR,IAAYC,GAAcF,EACpCU,QAAS,kBAAMH,KAHjB,0BC3CKI,EAAe,CAC1BX,cAAc,EACdrB,OAAO,EACPsB,QAAS,EACTC,WAAY,EACZC,WAAY,GAKDS,EAAU,WAGN,IAFfd,EAEc,uDAFNa,EACRE,EACc,uCACd,OAAQA,EAAOxB,MACb,KAAKC,EACH,IAAIwB,EAAWhB,EAAMG,QAKrB,OAJIH,EAAMG,QAAUH,EAAMK,aACxBW,EAAWhB,EAAMG,QAAUY,EAAOR,SACnBP,EAAMK,aAAYW,EAAWhB,EAAMK,YAE7C,2BAAKL,GAAZ,IAAmBG,QAASa,IAG9B,KAAKvB,EACH,OAAO,2BAAKO,GAAZ,IAAmBG,QAASH,EAAMI,aAEpC,KAAKV,EACH,OAAO,2BACFM,GADL,IAEEI,YAAaW,EAAOR,QACpBL,cAAc,IAGlB,KAAKP,EACH,OAAO,2BACFK,GADL,IAEEK,YAAaU,EAAOR,QACpBL,cAAc,IAGlB,KAAKN,EACH,OAAO,2BAAKI,GAAZ,IAAmBG,QAASH,EAAMI,WAAYF,cAAc,IAE9D,KAAKL,EACH,OAAO,2BAAKG,GAAZ,IAAmBnB,MAAOkC,EAAOlC,QAEnC,QACE,OAAOmB,I,wBCpCAiB,EAA4B,SAAC,GAUnC,IATLtC,EASI,EATJA,UACAuC,EAQI,EARJA,SACAC,EAOI,EAPJA,WACAC,EAMI,EANJA,aACAC,EAKI,EALJA,QACAxC,EAII,EAJJA,MACAyC,EAGI,EAHJA,MAEGtC,EACC,8FAWEuC,EAAc,uBAAmB1C,EAAQK,IAAEL,MAAQ,GAArC,YAClBF,GAAwB,IAG1B,OACE,qBAAKA,UAAU,aAAf,SACE,kCACE,+BAAO2C,IACP,mCACE/B,KAAK,OACLZ,UAAW4C,EACXL,SArBiB,SAACM,GACxBN,GAAYA,EAASM,GACrBJ,GAAgBA,EAAaI,EAAEC,cAAcC,QAoBvCP,WAlBmB,SAACK,GAC1BL,GAAcA,EAAWK,GAEf,UAAVA,EAAEG,KAAmBN,GAAWA,MAgBtBrC,U,gBCrCD4C,EAA8B,SAAC,GAAoC,IAAlCjD,EAAiC,EAAjCA,UAAWqB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtDC,EAAgDF,EAAhDE,aAAcrB,EAAkCmB,EAAlCnB,MAAOuB,EAA2BJ,EAA3BI,WAAYC,EAAeL,EAAfK,WAEzCwB,qBAAU,WACRC,aAAaC,QAAQ,UAAWC,KAAKC,UAAUjC,MAC9C,CAACA,IAEJ6B,qBAAU,WAEN5B,EAASH,EADPM,EAAa,GAAKA,GAAcC,MAKnC,CAACD,EAAYC,EAAYJ,IAE5B,IAYMiC,EAAe,UAAMhD,IAAEiD,OAAR,0BACnBxD,GAAwB,IAG1B,OACE,sBAAKA,UAAWuD,EAAhB,UACE,sBAAKvD,UAAU,UAAf,UACE,cAAC,EAAD,CACEY,KAAK,SACL+B,MAAM,aACNF,aAlBc,SAACb,GACrBN,EJjBG,SAAyBM,GAC9B,MAAO,CAAEhB,KAAMI,EAAiBY,WIgBrB6B,CAAgB7B,KAkBnBmB,MAAOrB,EACPxB,MAAOA,IAET,cAAC,EAAD,CACEU,KAAK,SACL+B,MAAM,eACNF,aA7Bc,SAACb,GACrBN,EJjBG,SAAyBM,GAC9B,MAAO,CAAEhB,KAAMG,EAAiBa,WIgBrB8B,CAAgB9B,KA6BnBmB,MAAOtB,EACPvB,MAAOA,OAGX,oBAAIF,UAAU,eACd,qBAAKA,UAAU,+BAAf,SACE,cAAC,EAAD,CACEA,UAAU,gBACVgC,UAAWT,GAAgBrB,EAC3B+B,QA/BW,WACjBX,EJhBK,CAAEV,KAAMK,KI2CT,uBC1CO0C,MApBf,WACE,IAAMC,EAAaT,aAAaU,QAAQ,WAClCC,EAAkBF,GAAcP,KAAKU,MAAMH,IAAgB1B,EAFpD,EAIa8B,qBAAW7B,EAAS2B,GAJjC,mBAINzC,EAJM,KAICC,EAJD,KAMP2C,EAAe,mDAErB,OACE,qBAAKjE,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,cAAC,EAAD,CAAQA,UAAWiE,EAAc5C,MAAOA,EAAOC,SAAUA,IACzD,cAAC,EAAD,CAAStB,UAAWiE,EAAc5C,MAAOA,EAAOC,SAAUA,YCPrD4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9172b0c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"Scoreboard_scoreboard__3aX6V\",\"label\":\"Scoreboard_label__3j9KO\",\"error\":\"Scoreboard_error__2askO\",\"alarm\":\"Scoreboard_alarm__2nBN8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__2VO4D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setter\":\"Setter_setter__2RaZh\"};","import React, { FC } from 'react'\nimport s from './Scoreboard.module.css'\n\ntype ScoreboardPropsType = {\n  alarm: boolean\n  error: boolean\n  activeCounter: boolean\n  className?: string\n}\n\nexport const Scoreboard: FC<ScoreboardPropsType> = ({\n  className,\n  alarm,\n  error,\n  activeCounter,\n  children,\n\n  ...restProps\n}) => {\n  const scoreboardClassName = `${s.scoreboard} ${alarm ? s.alarm : ''} ${\n    className ? className : ''\n  }`\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        {!activeCounter ? (\n          error ? (\n            <div className={s.error}>Incorrect value!</div>\n          ) : (\n            <div className={s.label}>enter values and press 'Set'</div>\n          )\n        ) : (\n          <h2 className={scoreboardClassName} {...restProps}>\n            {children}\n          </h2>\n        )}\n      </div>\n    </div>\n  )\n}\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps, FC } from 'react'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>\n\ntype ButtonPropsType = DefaultButtonPropsType & {}\n\nexport const Button: FC<ButtonPropsType> = ({\n  className,\n\n  ...restProps\n}) => {\n  const buttonClassName = `btn ${className ? className : 'btn-primary'}`\n\n  return <button type=\"button\" className={buttonClassName} {...restProps} />\n}\n","export const INCREMENT = 'INCREMENT'\ntype IncrementAction = {\n  type: typeof INCREMENT\n  payload: number\n}\n\nexport const RESET = 'RESET'\ntype ResetAction = {\n  type: typeof RESET\n}\n\nexport const SET_MIN_COUNTER = 'SET_MIN_COUNTER'\ntype SetMinCounterAction = {\n  type: typeof SET_MIN_COUNTER\n  payload: string\n}\n\nexport const SET_MAX_COUNTER = 'SET_MAX_COUNTER'\ntype SetMaxCounterAction = {\n  type: typeof SET_MAX_COUNTER\n  payload: string\n}\n\nexport const SET_COUNTER = 'SET_COUNTER'\ntype SetCounterAction = {\n  type: typeof SET_COUNTER\n}\n\nexport const SET_ERROR = 'SET_ERROR'\ntype SetErrorAction = {\n  type: typeof SET_ERROR\n  error: boolean\n}\n\nexport type ActionTypes =\n  | IncrementAction\n  | ResetAction\n  | SetMinCounterAction\n  | SetMaxCounterAction\n  | SetCounterAction\n  | SetErrorAction\n","import {\n  ActionTypes,\n  INCREMENT,\n  RESET,\n  SET_COUNTER,\n  SET_ERROR,\n  SET_MAX_COUNTER,\n  SET_MIN_COUNTER,\n} from './types'\n\nexport function incrementAC(payload: number): ActionTypes {\n  return { type: INCREMENT, payload } as const\n}\n\nexport function resetAC(): ActionTypes {\n  return { type: RESET } as const\n}\n\nexport function setMinCounterAC(payload: string): ActionTypes {\n  return { type: SET_MIN_COUNTER, payload } as const\n}\n\nexport function setMaxCounterAC(payload: string): ActionTypes {\n  return { type: SET_MAX_COUNTER, payload } as const\n}\n\nexport function setCounterAC(): ActionTypes {\n  return { type: SET_COUNTER } as const\n}\n\nexport function setErrorAC(error: boolean): ActionTypes {\n  return { type: SET_ERROR, error } as const\n}\n","import React, { FC } from 'react'\nimport { Scoreboard } from '../Scoreboard'\nimport { Button } from '../Button'\nimport { StateType } from '../../bus/reducer'\nimport s from './Counter.module.css'\nimport { ActionTypes } from '../../bus/types'\nimport { incrementAC, resetAC } from '../../bus/action'\n\ntype CounterPropsType = {\n  className?: string\n  state: StateType\n  dispatch: (props: ActionTypes) => void\n}\n\nexport const Counter: FC<CounterPropsType> = ({\n  className,\n  state,\n  dispatch,\n}) => {\n  const { setterActive, error, counter, minCounter, maxCounter } = state\n\n  const increaseCounter = (payload: number) => {\n    dispatch(incrementAC(payload))\n  }\n\n  const resetCounter = () => {\n    dispatch(resetAC())\n  }\n\n  const counterClassName = `${s.counter} jumbotron p-4 ${\n    className ? className : ''\n  }`\n\n  return (\n    <div className={counterClassName}>\n      <div className=\"mb-auto\">\n        <Scoreboard\n          alarm={counter >= maxCounter}\n          activeCounter={!setterActive}\n          error={error}\n        >\n          {counter}\n        </Scoreboard>\n      </div>\n      <hr className=\"my-4 w-100\" />\n      <div className=\"btn-group btn-group-lg w-100\">\n        <Button\n          className=\"btn-info w-50\"\n          disabled={counter >= maxCounter || setterActive}\n          onClick={() => increaseCounter(1)}\n        >\n          Increment\n        </Button>\n        <Button\n          className=\"btn-info w-50\"\n          disabled={counter === minCounter || setterActive}\n          onClick={() => resetCounter()}\n        >\n          Reset\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import {\n  ActionTypes,\n  INCREMENT,\n  RESET,\n  SET_COUNTER,\n  SET_ERROR,\n  SET_MAX_COUNTER,\n  SET_MIN_COUNTER,\n} from './types'\n\nexport const initialState = {\n  setterActive: false,\n  error: false,\n  counter: 0,\n  minCounter: 0,\n  maxCounter: 5,\n}\n\nexport type StateType = typeof initialState\n\nexport const reducer = (\n  state = initialState,\n  action: ActionTypes,\n): StateType => {\n  switch (action.type) {\n    case INCREMENT: {\n      let increase = state.counter\n      if (state.counter < state.maxCounter) {\n        increase = state.counter + action.payload\n        if (increase > state.maxCounter) increase = state.maxCounter\n      }\n      return { ...state, counter: increase }\n    }\n\n    case RESET:\n      return { ...state, counter: state.minCounter }\n\n    case SET_MIN_COUNTER:\n      return {\n        ...state,\n        minCounter: +action.payload,\n        setterActive: true,\n      }\n\n    case SET_MAX_COUNTER:\n      return {\n        ...state,\n        maxCounter: +action.payload,\n        setterActive: true,\n      }\n\n    case SET_COUNTER:\n      return { ...state, counter: state.minCounter, setterActive: false }\n\n    case SET_ERROR:\n      return { ...state, error: action.error }\n\n    default:\n      return state\n  }\n}\n","import React, {\n  InputHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  ChangeEvent,\n  KeyboardEvent,\n} from 'react'\n\nimport s from './Input.module.css'\n\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>\n\ntype InputPropsType = DefaultInputPropsType & {\n  onChangeText?: (value: string) => void\n  onEnter?: () => void\n  error?: boolean\n  title?: string\n}\n\nexport const Input: FC<InputPropsType> = ({\n  className,\n  onChange,\n  onKeyPress,\n  onChangeText,\n  onEnter,\n  error,\n  title,\n\n  ...restProps\n}) => {\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange && onChange(e)\n    onChangeText && onChangeText(e.currentTarget.value)\n  }\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n    onKeyPress && onKeyPress(e)\n\n    e.key === 'Enter' && onEnter && onEnter()\n  }\n\n  const inputClassName = `form-control ${error ? s.error : ''} ${\n    className ? className : ''\n  }`\n\n  return (\n    <div className=\"form-group\">\n      <label>\n        <span>{title}</span>\n        <input\n          type=\"text\"\n          className={inputClassName}\n          onChange={onChangeCallback}\n          onKeyPress={onKeyPressCallback}\n          {...restProps}\n        />\n      </label>\n    </div>\n  )\n}\n","import React, { FC, useEffect } from 'react'\nimport { Input } from '../Input'\nimport { Button } from '../Button'\nimport { StateType } from '../../bus/reducer'\nimport s from './Setter.module.css'\nimport {\n  setCounterAC,\n  setErrorAC,\n  setMaxCounterAC,\n  setMinCounterAC,\n} from '../../bus/action'\nimport { ActionTypes } from '../../bus/types'\n\ntype SetterPropsType = {\n  className?: string\n  state: StateType\n  dispatch: (props: ActionTypes) => void\n}\n\nexport const Setter: FC<SetterPropsType> = ({ className, state, dispatch }) => {\n  const { setterActive, error, minCounter, maxCounter } = state\n\n  useEffect(() => {\n    localStorage.setItem('counter', JSON.stringify(state))\n  }, [state])\n\n  useEffect(() => {\n    if (minCounter < 0 || minCounter >= maxCounter) {\n      dispatch(setErrorAC(true))\n    } else {\n      dispatch(setErrorAC(false))\n    }\n  }, [minCounter, maxCounter, dispatch])\n\n  const setMinCounter = (payload: string) => {\n    dispatch(setMinCounterAC(payload))\n  }\n\n  const setMaxCounter = (payload: string) => {\n    dispatch(setMaxCounterAC(payload))\n  }\n\n  const setCounter = () => {\n    dispatch(setCounterAC())\n  }\n\n  const setterClassName = `${s.setter} jumbotron p-4 ${\n    className ? className : ''\n  }`\n\n  return (\n    <div className={setterClassName}>\n      <div className=\"mb-auto\">\n        <Input\n          type=\"number\"\n          title=\"max value:\"\n          onChangeText={setMaxCounter}\n          value={maxCounter}\n          error={error}\n        />\n        <Input\n          type=\"number\"\n          title=\"start value:\"\n          onChangeText={setMinCounter}\n          value={minCounter}\n          error={error}\n        />\n      </div>\n      <hr className=\"my-4 w-100\" />\n      <div className=\"btn-group btn-group-lg w-100\">\n        <Button\n          className=\"btn-info w-50\"\n          disabled={!setterActive || error}\n          onClick={setCounter}\n        >\n          Set\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React, { useReducer } from 'react'\nimport { Counter } from './components/Counter'\nimport { initialState, reducer } from './bus/reducer'\nimport './App.css'\nimport { Setter } from './components/Setter'\n\n// type LocalStoreType = string | null\n\nfunction App() {\n  const localState = localStorage.getItem('counter')\n  const preloadedState = (localState && JSON.parse(localState)) || initialState\n\n  const [state, dispatch] = useReducer(reducer, preloadedState)\n\n  const colClassName = 'col col-sm col-md-6 ml-3 mr-3 d-flex flex-column'\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <Setter className={colClassName} state={state} dispatch={dispatch} />\n          <Counter className={colClassName} state={state} dispatch={dispatch} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}