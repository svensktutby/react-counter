{"version":3,"sources":["components/Counter/Counter.module.css","components/Scoreboard/Scoreboard.module.css","components/Scoreboard/Scoreboard.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","bus/types.ts","bus/reducer.ts","App.tsx","bus/action.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","Scoreboard","className","alarm","children","restProps","scoreboardClassName","s","scoreboard","Button","type","clickHandler","buttonClassName","onClick","Counter","state","increaseCounter","resetCounter","counter","minCounter","maxCounter","counterClassName","btnGroup","halfSize","disabled","INCREMENT","RESET","initialState","reducer","action","increase","payload","App","useReducer","dispatch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,QAAU,8CAA8C,SAAW,0BAA0B,SAAW,4B,kBCA1HD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,MAAQ,4B,uLCOzDC,EAAsC,SAAC,GAK7C,IAJLC,EAII,EAJJA,UACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACGC,EACC,gDACEC,EAAmB,UAAMC,IAAEC,WAAR,YAAsBL,EAAQI,IAAEJ,MAAQ,GAAxC,YACvBD,GAAwB,IAG1B,OACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,wBAAf,SACE,4CAAIA,UAAWI,GAAyBD,GAAxC,aACGD,UCXEK,EAA8B,SAAC,GAKrC,IAAD,IAJJC,YAII,MAJG,SAIH,EAHJR,EAGI,EAHJA,UACAS,EAEI,EAFJA,aACGN,EACC,mDACEO,EAAe,cAAUV,GAAwB,eAEvD,OACE,oCACEW,QAASF,EACTT,UAAWU,EACXF,KAAMA,GACFL,KCXGS,EAAgC,SAAC,GAKvC,IAJLZ,EAII,EAJJA,UACAa,EAGI,EAHJA,MACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,aAEQC,EAAoCH,EAApCG,QAASC,EAA2BJ,EAA3BI,WAAYC,EAAeL,EAAfK,WAEvBC,EAAgB,UAAMd,IAAEW,QAAR,sBACpBhB,GAAwB,IAG1B,OACE,sBAAKA,UAAWmB,EAAhB,UACE,cAAC,EAAD,CAAYlB,MAAOe,GAAWE,EAA9B,SAA2CF,IAC3C,oBAAIhB,UAAU,SACd,sBAAKA,UAAS,iCAA4BK,IAAEe,UAA5C,UACE,cAAC,EAAD,CACEpB,UAAS,mBAAcK,IAAEgB,UACzBC,SAAUN,GAAWE,EACrBT,aAAcK,EAHhB,uBAOA,cAAC,EAAD,CACEd,UAAS,mBAAcK,IAAEgB,UACzBC,SAAUN,IAAYC,EACtBR,aAAcM,EAHhB,0BCrCKQ,EAAY,YAMZC,EAAQ,QCERC,EAA0B,CACrCT,QAAS,EACTC,WAAY,EACZC,WAAY,GAGDQ,EAAU,WAGN,IAFfb,EAEc,uDAFNY,EACRE,EACc,uCACd,OAAQA,EAAOnB,MACb,KAAKe,EACH,IAAIK,EAAWf,EAAMG,QAKrB,OAJIH,EAAMG,QAAUH,EAAMK,aACxBU,EAAWf,EAAMG,QAAUW,EAAOE,SACnBhB,EAAMK,aAAYU,EAAWf,EAAMK,YAE7C,2BAAKL,GAAZ,IAAmBG,QAASY,IAE9B,KAAKJ,EACH,OAAO,2BAAKX,GAAZ,IAAmBG,QAAS,IAE9B,QACE,OAAOH,I,MCFEiB,MAtBf,WAAgB,IAAD,EACaC,qBAAWL,EAASD,GADjC,mBACNZ,EADM,KACCmB,EADD,KAWb,OACE,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,CACEa,MAAOA,EACPC,gBAZkB,WACtBkB,ECRK,CAAExB,KAAMe,EAAWM,QDQH,KAYjBd,aATe,WACnBiB,ECRK,CAAExB,KAAMgB,UCOFS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.411bf91d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2d6O8 App_jumbotron__13Xfc\",\"btnGroup\":\"Counter_btnGroup__2f_78\",\"halfSize\":\"Counter_halfSize__2Xqmj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"Scoreboard_scoreboard__3aX6V\",\"alarm\":\"Scoreboard_alarm__2nBN8\"};","import React, { FC } from 'react'\nimport s from './Scoreboard.module.css'\n\ntype ScoreboardPropsType = {\n  alarm: boolean\n  className?: string\n}\n\nexport const Scoreboard: FC<ScoreboardPropsType> = ({\n  className,\n  alarm,\n  children,\n  ...restProps\n}) => {\n  const scoreboardClassName = `${s.scoreboard} ${alarm ? s.alarm : ''} ${\n    className ? className : ''\n  }`\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        <h2 className={scoreboardClassName} {...restProps}>\n          {children}\n        </h2>\n      </div>\n    </div>\n  )\n}\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps, FC } from 'react';\n\ntype DefaultButtonPropsType = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\ntype ButtonPropsType = DefaultButtonPropsType & {\n  clickHandler: () => void;\n};\n\nexport const Button: FC<ButtonPropsType> = ({\n  type = 'button',\n  className,\n  clickHandler,\n  ...restProps\n}) => {\n  const buttonClassName = `btn ${className ? className : 'btn-primary'}`;\n\n  return (\n    <button\n      onClick={clickHandler}\n      className={buttonClassName}\n      type={type}\n      {...restProps}\n    />\n  );\n};\n","import React, { FC } from 'react'\nimport s from './Counter.module.css'\nimport { Scoreboard } from '../Scoreboard'\nimport { Button } from '../Button'\nimport { StateType } from '../../bus/reducer'\n\ntype CounterPropsType = {\n  className?: string\n  state: StateType\n  increaseCounter: () => void\n  resetCounter: () => void\n}\n\nexport const Counter: FC<CounterPropsType> = ({\n  className,\n  state,\n  increaseCounter,\n  resetCounter,\n}) => {\n  const { counter, minCounter, maxCounter } = state\n\n  const counterClassName = `${s.counter} jumbotron ${\n    className ? className : ''\n  }`\n\n  return (\n    <div className={counterClassName}>\n      <Scoreboard alarm={counter >= maxCounter}>{counter}</Scoreboard>\n      <hr className=\"my-4\" />\n      <div className={`btn-group btn-group-lg ${s.btnGroup}`}>\n        <Button\n          className={`btn-info ${s.halfSize}`}\n          disabled={counter >= maxCounter}\n          clickHandler={increaseCounter}\n        >\n          Increment\n        </Button>\n        <Button\n          className={`btn-info ${s.halfSize}`}\n          disabled={counter === minCounter}\n          clickHandler={resetCounter}\n        >\n          Reset\n        </Button>\n      </div>\n    </div>\n  )\n}\n","export const INCREMENT = 'INCREMENT'\ntype IncrementAction = {\n  type: typeof INCREMENT\n  payload: number\n}\n\nexport const RESET = 'RESET'\ntype ResetAction = {\n  type: typeof RESET\n}\n\nexport type ActionTypes = IncrementAction | ResetAction\n","import { ActionTypes, INCREMENT, RESET } from './types'\n\nexport type StateType = {\n  counter: number\n  minCounter: number\n  maxCounter: number\n}\n\nexport const initialState: StateType = {\n  counter: 0,\n  minCounter: 0,\n  maxCounter: 5,\n}\n\nexport const reducer = (\n  state = initialState,\n  action: ActionTypes,\n): StateType => {\n  switch (action.type) {\n    case INCREMENT:\n      let increase = state.counter\n      if (state.counter < state.maxCounter) {\n        increase = state.counter + action.payload\n        if (increase > state.maxCounter) increase = state.maxCounter\n      }\n      return { ...state, counter: increase }\n\n    case RESET:\n      return { ...state, counter: 0 }\n\n    default:\n      return state\n  }\n}\n","import React, { useReducer } from 'react'\nimport { Counter } from './components/Counter'\nimport { initialState } from './bus/reducer'\nimport { reducer } from './bus/reducer'\nimport { incrementAC, resetAC } from './bus/action'\nimport './App.css'\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const increaseCounter = () => {\n    dispatch(incrementAC(1))\n  }\n\n  const resetCounter = () => {\n    dispatch(resetAC())\n  }\n\n  return (\n    <div className=\"App\">\n      <Counter\n        state={state}\n        increaseCounter={increaseCounter}\n        resetCounter={resetCounter}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { ActionTypes, INCREMENT, RESET } from './types'\n\nexport function incrementAC(payload: number): ActionTypes {\n  return { type: INCREMENT, payload }\n}\n\nexport function resetAC(): ActionTypes {\n  return { type: RESET }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}