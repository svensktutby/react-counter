{"version":3,"sources":["components/Setter/Setter.module.css","components/common/Input/Input.module.css","components/common/Button/Button.tsx","bll/types.ts","components/Scoreboard/Scoreboard.tsx","bll/actions.ts","bll/selectors.ts","components/Counter/Counter.tsx","components/common/Input/Input.tsx","components/Setter/Setter.tsx","App.tsx","reportWebVitals.ts","bll/counterReducer.ts","bll/store.ts","utils/localStorage.ts","index.tsx","components/Scoreboard/Scoreboard.module.css"],"names":["module","exports","Button","memo","className","restProps","buttonClassName","type","displayName","ActionType","Scoreboard","alarm","error","isCounterActive","children","scoreboardClassName","s","scoreboard","label","setError","SET_ERROR","useCounterSelectors","isSetterActive","useSelector","state","counterReducer","minCounter","maxCounter","counter","Counter","dispatch","useDispatch","increaseCounter","value","INCREMENT","payload","actions","resetCounter","RESET","showSetter","ACTIVATE_SETTER","counterClassName","disabled","onClick","Input","onChange","onKeyPress","onChangeText","onEnter","title","inputClassName","e","currentTarget","key","Setter","useEffect","setterClassName","setter","SET_MAX_COUNTER","SET_MIN_COUNTER","SET_COUNTER","App","colClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","increase","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","devtools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancers","compose","middleware","thunk","enhancedStore","applyMiddleware","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f90d44a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"setter\":\"Setter_setter__2RaZh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__3xwZB\"};","import React, { ButtonHTMLAttributes, DetailedHTMLProps, FC, memo } from 'react'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>\n\ntype ButtonPropsType = DefaultButtonPropsType & {}\n\nexport const Button: FC<ButtonPropsType> = memo(\n  ({\n    className,\n\n    ...restProps\n  }) => {\n    const buttonClassName = `btn ${className ? className : 'btn-primary'}`\n\n    return <button type=\"button\" className={buttonClassName} {...restProps} />\n  },\n)\n\nButton.displayName = 'Button'\n","export enum ActionType {\n  INCREMENT = 'COUNTER/INCREMENT',\n  RESET = 'COUNTER/RESET',\n  SET_MIN_COUNTER = 'COUNTER/SET_MIN_COUNTER',\n  SET_MAX_COUNTER = 'COUNTER/SET_MAX_COUNTER',\n  SET_COUNTER = 'COUNTER/SET_COUNTER',\n  SET_ERROR = 'COUNTER/SET_ERROR',\n  ACTIVATE_SETTER = 'COUNTER/ACTIVATE_SETTER',\n}\n","import React, { FC, memo } from 'react';\nimport s from './Scoreboard.module.css';\n\ntype ScoreboardPropsType = {\n  alarm: boolean;\n  error: boolean;\n  isCounterActive: boolean;\n  className?: string;\n};\n\nexport const Scoreboard: FC<ScoreboardPropsType> = memo(\n  ({\n    className,\n    alarm,\n    error,\n    isCounterActive,\n    children,\n\n    ...restProps\n  }) => {\n    const scoreboardClassName = `${s.scoreboard} ${alarm ? s.alarm : ''} ${\n      className ? className : ''\n    }`;\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-body text-center\">\n          {!isCounterActive ? (\n            error ? (\n              <div className={s.error}>Incorrect value!</div>\n            ) : (\n              <div className={s.label}>enter values and press 'Set'</div>\n            )\n          ) : (\n            <h2 className={scoreboardClassName} {...restProps}>\n              {children}\n            </h2>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nScoreboard.displayName = 'Scoreboard';\n","import { ActionType } from './types';\n\n// Sync\nexport function increment(value: number) {\n  return { type: ActionType.INCREMENT, payload: value } as const;\n}\n\nexport function reset() {\n  return { type: ActionType.RESET } as const;\n}\n\nexport function setMinCounter(value: string) {\n  return { type: ActionType.SET_MIN_COUNTER, payload: value } as const;\n}\n\nexport function setMaxCounter(value: string) {\n  return { type: ActionType.SET_MAX_COUNTER, payload: value } as const;\n}\n\nexport function setCounter() {\n  return { type: ActionType.SET_COUNTER } as const;\n}\n\nexport function setError(error: boolean) {\n  return { type: ActionType.SET_ERROR, error } as const;\n}\n\nexport function activateSetter() {\n  return { type: ActionType.ACTIVATE_SETTER } as const;\n}\n\nexport type CounterActionsType =\n  | ReturnType<typeof increment>\n  | ReturnType<typeof reset>\n  | ReturnType<typeof setMinCounter>\n  | ReturnType<typeof setMaxCounter>\n  | ReturnType<typeof setCounter>\n  | ReturnType<typeof setError>\n  | ReturnType<typeof activateSetter>;\n","import { useSelector } from 'react-redux';\n\nimport { AppStateType } from './store';\nimport { StateType } from './counterReducer';\n\nexport const useCounterSelectors = (): StateType => {\n  const isSetterActive = useSelector<AppStateType, boolean>(\n    (state) => state.counterReducer.isSetterActive,\n  );\n  const error = useSelector<AppStateType, boolean>(\n    (state) => state.counterReducer.error,\n  );\n  const minCounter = useSelector<AppStateType, number>(\n    (state) => state.counterReducer.minCounter,\n  );\n  const maxCounter = useSelector<AppStateType, number>(\n    (state) => state.counterReducer.maxCounter,\n  );\n  const counter = useSelector<AppStateType, number>(\n    (state) => state.counterReducer.counter,\n  );\n\n  return { isSetterActive, error, counter, minCounter, maxCounter };\n};\n","import React, { FC, memo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport s from './Counter.module.css';\nimport { Button } from '../common/Button';\nimport { Scoreboard } from '../Scoreboard';\nimport * as actions from '../../bll/actions';\nimport { useCounterSelectors } from '../../bll/selectors';\n\ntype CounterPropsType = {\n  className?: string;\n};\n\nexport const Counter: FC<CounterPropsType> = memo(({ className }) => {\n  const {\n    isSetterActive,\n    error,\n    counter,\n    minCounter,\n    maxCounter,\n  } = useCounterSelectors();\n\n  const dispatch = useDispatch();\n\n  const increaseCounter = (value: number) => {\n    dispatch(actions.increment(value));\n  };\n\n  const resetCounter = () => {\n    dispatch(actions.reset());\n  };\n\n  const showSetter = () => {\n    dispatch(actions.activateSetter());\n  };\n\n  const counterClassName = `${s.counter} jumbotron p-4 ${\n    className ? className : ''\n  }`;\n\n  return (\n    <div className={counterClassName}>\n      <div className=\"mb-auto\">\n        <Scoreboard\n          alarm={counter >= maxCounter}\n          isCounterActive={!isSetterActive}\n          error={error}\n        >\n          {counter}\n        </Scoreboard>\n      </div>\n      <hr className=\"my-4 w-100\" />\n      <div className=\"btn-group btn-group-lg w-100\">\n        <Button\n          className=\"btn-info w-50\"\n          disabled={counter >= maxCounter || isSetterActive}\n          onClick={() => increaseCounter(1)}\n        >\n          Inc\n        </Button>\n        <Button\n          className=\"btn-info w-50\"\n          disabled={counter === minCounter || isSetterActive}\n          onClick={() => resetCounter()}\n        >\n          Reset\n        </Button>\n        <Button className=\"btn-info w-50\" onClick={() => showSetter()}>\n          Set\n        </Button>\n      </div>\n    </div>\n  );\n});\n\nCounter.displayName = 'Counter';\n","import React, {\n  InputHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  ChangeEvent,\n  KeyboardEvent,\n  memo,\n} from 'react'\n\nimport s from './Input.module.css'\n\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>\n\ntype InputPropsType = DefaultInputPropsType & {\n  onChangeText?: (value: string) => void\n  onEnter?: () => void\n  error?: boolean\n  title?: string\n}\n\nexport const Input: FC<InputPropsType> = memo(\n  ({\n    className,\n    onChange,\n    onKeyPress,\n    onChangeText,\n    onEnter,\n    error,\n    title,\n\n    ...restProps\n  }) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(e)\n      onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n      onKeyPress && onKeyPress(e)\n\n      e.key === 'Enter' && onEnter && onEnter()\n    }\n\n    const inputClassName = `form-control ${error ? s.error : ''} ${\n      className ? className : ''\n    }`\n\n    return (\n      <div className=\"form-group\">\n        <label>\n          <span>{title}</span>\n          <input\n            type=\"text\"\n            className={inputClassName}\n            onChange={onChangeCallback}\n            onKeyPress={onKeyPressCallback}\n            {...restProps}\n          />\n        </label>\n      </div>\n    )\n  },\n)\n\nInput.displayName = 'Input'\n","import React, { FC, memo, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport s from './Setter.module.css';\nimport { Input } from '../common/Input';\nimport { Button } from '../common/Button';\nimport * as actions from '../../bll/actions';\nimport { useCounterSelectors } from '../../bll/selectors';\n\ntype SetterPropsType = {\n  className?: string;\n};\n\nexport const Setter: FC<SetterPropsType> = memo(({ className }) => {\n  const {\n    isSetterActive,\n    error,\n    minCounter,\n    maxCounter,\n  } = useCounterSelectors();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (minCounter < 0 || minCounter >= maxCounter) {\n      dispatch(actions.setError(true));\n    } else {\n      dispatch(actions.setError(false));\n    }\n  }, [minCounter, maxCounter, dispatch]);\n\n  const setMinCounter = (value: string) => {\n    dispatch(actions.setMinCounter(value));\n  };\n\n  const setMaxCounter = (value: string) => {\n    dispatch(actions.setMaxCounter(value));\n  };\n\n  const setCounter = () => {\n    dispatch(actions.setCounter());\n  };\n\n  const setterClassName = `${s.setter} jumbotron p-4 ${\n    className ? className : ''\n  }`;\n\n  return (\n    <div className={setterClassName}>\n      <div className=\"mb-auto\">\n        <Input\n          type=\"number\"\n          title=\"max value:\"\n          onChangeText={setMaxCounter}\n          value={maxCounter}\n          error={error}\n        />\n        <Input\n          type=\"number\"\n          title=\"start value:\"\n          onChangeText={setMinCounter}\n          value={minCounter}\n          error={error}\n        />\n      </div>\n      <hr className=\"my-4 w-100\" />\n      <div className=\"btn-group btn-group-lg w-100\">\n        <Button\n          className=\"btn-info w-50\"\n          disabled={!isSetterActive || error}\n          onClick={setCounter}\n        >\n          Set\n        </Button>\n      </div>\n    </div>\n  );\n});\n\nSetter.displayName = 'Setter';\n","import React from 'react';\nimport './App.css';\nimport { Counter } from './components/Counter';\nimport { Setter } from './components/Setter';\nimport { useCounterSelectors } from './bll/selectors';\n\nfunction App() {\n  const { isSetterActive } = useCounterSelectors();\n\n  const colClassName = 'col col-sm col-md-6 ml-3 mr-3 d-flex flex-column';\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          {isSetterActive ? (\n            <Setter className={colClassName} />\n          ) : (\n            <Counter className={colClassName} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ActionType } from './types';\nimport * as actions from './actions';\n\nexport const initialState = {\n  isSetterActive: false,\n  error: false,\n  counter: 0,\n  minCounter: 0,\n  maxCounter: 5,\n};\n\nexport type StateType = typeof initialState;\n\nexport const counterReducer = (\n  state = initialState,\n  action: actions.CounterActionsType,\n): StateType => {\n  switch (action.type) {\n    case ActionType.INCREMENT: {\n      let increase = state.counter;\n      if (state.counter < state.maxCounter) {\n        increase = state.counter + action.payload;\n        if (increase > state.maxCounter) increase = state.maxCounter;\n      }\n      return { ...state, counter: increase };\n    }\n\n    case ActionType.RESET:\n      return { ...state, counter: state.minCounter };\n\n    case ActionType.SET_MIN_COUNTER:\n      return {\n        ...state,\n        minCounter: +action.payload,\n      };\n\n    case ActionType.SET_MAX_COUNTER:\n      return {\n        ...state,\n        maxCounter: +action.payload,\n      };\n\n    case ActionType.SET_COUNTER:\n      return { ...state, counter: state.minCounter, isSetterActive: false };\n\n    case ActionType.SET_ERROR:\n      return { ...state, error: action.error };\n\n    case ActionType.ACTIVATE_SETTER:\n      return { ...state, isSetterActive: true };\n\n    default:\n      return state;\n  }\n};\n","import {\n  createStore,\n  combineReducers,\n  applyMiddleware,\n  compose,\n  Middleware,\n} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { counterReducer } from './counterReducer';\nimport { loadState, saveState } from '../utils/localStorage';\n\nexport type AppStateType = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n  counterReducer,\n});\n\nconst persistedState = loadState();\n\n// @ts-ignore next line\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = devtools ? devtools : compose;\n\nconst middleware: Array<Middleware> = [thunk];\n\nexport const enhancedStore = composeEnhancers(applyMiddleware(...middleware));\n\nexport const store = createStore(rootReducer, persistedState, enhancedStore);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n","import { AppStateType } from '../bll/store';\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: AppStateType) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"Scoreboard_scoreboard__3aX6V\",\"label\":\"Scoreboard_label__3j9KO\",\"error\":\"Scoreboard_error__2askO\",\"alarm\":\"Scoreboard_alarm__2nBN8\"};"],"sourceRoot":""}