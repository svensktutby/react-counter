{"version":3,"sources":["components/Scoreboard/Scoreboard.module.css","components/Setter/Setter.module.css","components/Input/Input.module.css","components/Button/Button.tsx","components/Scoreboard/Scoreboard.tsx","bus/types.ts","bus/action.ts","components/Counter/Counter.tsx","bus/reducer.ts","components/Input/Input.tsx","components/Setter/Setter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","memo","className","restProps","buttonClassName","type","displayName","Scoreboard","alarm","error","isCounterActive","children","scoreboardClassName","s","scoreboard","label","INCREMENT","RESET","SET_MIN_COUNTER","SET_MAX_COUNTER","SET_COUNTER","SET_ERROR","ACTIVATE_SETTER","setErrorAC","Counter","state","dispatch","isSetterActive","counter","minCounter","maxCounter","increaseCounter","payload","incrementAC","resetCounter","counterClassName","disabled","onClick","initialState","reducer","action","increase","Input","onChange","onKeyPress","onChangeText","onEnter","title","inputClassName","e","currentTarget","value","key","Setter","useEffect","setterClassName","setter","setMaxCounterAC","setMinCounterAC","App","localState","localStorage","getItem","preloadedState","JSON","parse","useReducer","setItem","stringify","colClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbbdd675.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"Scoreboard_scoreboard__3aX6V\",\"label\":\"Scoreboard_label__3j9KO\",\"error\":\"Scoreboard_error__2askO\",\"alarm\":\"Scoreboard_alarm__2nBN8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setter\":\"Setter_setter__2RaZh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__2VO4D\"};","import React, { ButtonHTMLAttributes, DetailedHTMLProps, FC, memo } from 'react'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<\n  ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>\n\ntype ButtonPropsType = DefaultButtonPropsType & {}\n\nexport const Button: FC<ButtonPropsType> = memo(\n  ({\n    className,\n\n    ...restProps\n  }) => {\n    const buttonClassName = `btn ${className ? className : 'btn-primary'}`\n\n    return <button type=\"button\" className={buttonClassName} {...restProps} />\n  },\n)\n\nButton.displayName = 'Button'\n","import React, { FC, memo } from 'react'\nimport s from './Scoreboard.module.css'\n\ntype ScoreboardPropsType = {\n  alarm: boolean\n  error: boolean\n  isCounterActive: boolean\n  className?: string\n}\n\nexport const Scoreboard: FC<ScoreboardPropsType> = memo(\n  ({\n    className,\n    alarm,\n    error,\n    isCounterActive,\n    children,\n\n    ...restProps\n  }) => {\n    const scoreboardClassName = `${s.scoreboard} ${alarm ? s.alarm : ''} ${\n      className ? className : ''\n    }`\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-body text-center\">\n          {!isCounterActive ? (\n            error ? (\n              <div className={s.error}>Incorrect value!</div>\n            ) : (\n              <div className={s.label}>enter values and press 'Set'</div>\n            )\n          ) : (\n            <h2 className={scoreboardClassName} {...restProps}>\n              {children}\n            </h2>\n          )}\n        </div>\n      </div>\n    )\n  },\n)\n\nScoreboard.displayName = 'Scoreboard'\n","export const INCREMENT = 'INCREMENT'\ntype IncrementAction = {\n  type: typeof INCREMENT\n  payload: number\n}\n\nexport const RESET = 'RESET'\ntype ResetAction = {\n  type: typeof RESET\n}\n\nexport const SET_MIN_COUNTER = 'SET_MIN_COUNTER'\ntype SetMinCounterAction = {\n  type: typeof SET_MIN_COUNTER\n  payload: string\n}\n\nexport const SET_MAX_COUNTER = 'SET_MAX_COUNTER'\ntype SetMaxCounterAction = {\n  type: typeof SET_MAX_COUNTER\n  payload: string\n}\n\nexport const SET_COUNTER = 'SET_COUNTER'\ntype SetCounterAction = {\n  type: typeof SET_COUNTER\n}\n\nexport const SET_ERROR = 'SET_ERROR'\ntype SetErrorAction = {\n  type: typeof SET_ERROR\n  error: boolean\n}\n\nexport const ACTIVATE_SETTER = 'ACTIVATE_SETTER'\ntype ActivateSetterAction = {\n  type: typeof ACTIVATE_SETTER\n}\n\nexport type ActionTypes =\n  | IncrementAction\n  | ResetAction\n  | SetMinCounterAction\n  | SetMaxCounterAction\n  | SetCounterAction\n  | SetErrorAction\n  | ActivateSetterAction\n","import {\n  ActionTypes,\n  ACTIVATE_SETTER,\n  INCREMENT,\n  RESET,\n  SET_COUNTER,\n  SET_ERROR,\n  SET_MAX_COUNTER,\n  SET_MIN_COUNTER,\n} from './types'\n\nexport function incrementAC(payload: number): ActionTypes {\n  return { type: INCREMENT, payload } as const\n}\n\nexport function resetAC(): ActionTypes {\n  return { type: RESET } as const\n}\n\nexport function setMinCounterAC(payload: string): ActionTypes {\n  return { type: SET_MIN_COUNTER, payload } as const\n}\n\nexport function setMaxCounterAC(payload: string): ActionTypes {\n  return { type: SET_MAX_COUNTER, payload } as const\n}\n\nexport function setCounterAC(): ActionTypes {\n  return { type: SET_COUNTER } as const\n}\n\nexport function setErrorAC(error: boolean): ActionTypes {\n  return { type: SET_ERROR, error } as const\n}\n\nexport function activateSetterAC(): ActionTypes {\n  return { type: ACTIVATE_SETTER } as const\n}\n","import React, { FC, memo } from 'react'\nimport s from './Counter.module.css'\nimport { Button } from '../Button'\nimport { Scoreboard } from '../Scoreboard'\nimport { activateSetterAC, incrementAC, resetAC } from '../../bus/action'\nimport { StateType } from '../../bus/reducer'\nimport { ActionTypes } from '../../bus/types'\n\ntype CounterPropsType = {\n  className?: string\n  state: StateType\n  dispatch: (props: ActionTypes) => void\n}\n\nexport const Counter: FC<CounterPropsType> = memo(\n  ({ className, state, dispatch }) => {\n    const { isSetterActive, error, counter, minCounter, maxCounter } = state\n\n    const increaseCounter = (payload: number) => {\n      dispatch(incrementAC(payload))\n    }\n\n    const resetCounter = () => {\n      dispatch(resetAC())\n    }\n\n    const showSetter = () => {\n      dispatch(activateSetterAC())\n    }\n\n    const counterClassName = `${s.counter} jumbotron p-4 ${\n      className ? className : ''\n    }`\n\n    return (\n      <div className={counterClassName}>\n        <div className=\"mb-auto\">\n          <Scoreboard\n            alarm={counter >= maxCounter}\n            isCounterActive={!isSetterActive}\n            error={error}\n          >\n            {counter}\n          </Scoreboard>\n        </div>\n        <hr className=\"my-4 w-100\" />\n        <div className=\"btn-group btn-group-lg w-100\">\n          <Button\n            className=\"btn-info w-50\"\n            disabled={counter >= maxCounter || isSetterActive}\n            onClick={() => increaseCounter(1)}\n          >\n            Inc\n          </Button>\n          <Button\n            className=\"btn-info w-50\"\n            disabled={counter === minCounter || isSetterActive}\n            onClick={() => resetCounter()}\n          >\n            Reset\n          </Button>\n          <Button className=\"btn-info w-50\" onClick={showSetter}>\n            Set\n          </Button>\n        </div>\n      </div>\n    )\n  },\n)\n\nCounter.displayName = 'Counter'\n","import {\n  ActionTypes,\n  ACTIVATE_SETTER,\n  INCREMENT,\n  RESET,\n  SET_COUNTER,\n  SET_ERROR,\n  SET_MAX_COUNTER,\n  SET_MIN_COUNTER,\n} from './types'\n\nexport const initialState = {\n  isSetterActive: false,\n  error: false,\n  counter: 0,\n  minCounter: 0,\n  maxCounter: 5,\n}\n\nexport type StateType = typeof initialState\n\nexport const reducer = (\n  state = initialState,\n  action: ActionTypes,\n): StateType => {\n  switch (action.type) {\n    case INCREMENT: {\n      let increase = state.counter\n      if (state.counter < state.maxCounter) {\n        increase = state.counter + action.payload\n        if (increase > state.maxCounter) increase = state.maxCounter\n      }\n      return { ...state, counter: increase }\n    }\n\n    case RESET:\n      return { ...state, counter: state.minCounter }\n\n    case SET_MIN_COUNTER:\n      return {\n        ...state,\n        minCounter: +action.payload,\n      }\n\n    case SET_MAX_COUNTER:\n      return {\n        ...state,\n        maxCounter: +action.payload,\n      }\n\n    case SET_COUNTER:\n      return { ...state, counter: state.minCounter, isSetterActive: false }\n\n    case SET_ERROR:\n      return { ...state, error: action.error }\n\n    case ACTIVATE_SETTER:\n      return { ...state, isSetterActive: true }\n\n    default:\n      return state\n  }\n}\n","import React, {\n  InputHTMLAttributes,\n  DetailedHTMLProps,\n  FC,\n  ChangeEvent,\n  KeyboardEvent,\n  memo,\n} from 'react'\n\nimport s from './Input.module.css'\n\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>\n\ntype InputPropsType = DefaultInputPropsType & {\n  onChangeText?: (value: string) => void\n  onEnter?: () => void\n  error?: boolean\n  title?: string\n}\n\nexport const Input: FC<InputPropsType> = memo(\n  ({\n    className,\n    onChange,\n    onKeyPress,\n    onChangeText,\n    onEnter,\n    error,\n    title,\n\n    ...restProps\n  }) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(e)\n      onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n      onKeyPress && onKeyPress(e)\n\n      e.key === 'Enter' && onEnter && onEnter()\n    }\n\n    const inputClassName = `form-control ${error ? s.error : ''} ${\n      className ? className : ''\n    }`\n\n    return (\n      <div className=\"form-group\">\n        <label>\n          <span>{title}</span>\n          <input\n            type=\"text\"\n            className={inputClassName}\n            onChange={onChangeCallback}\n            onKeyPress={onKeyPressCallback}\n            {...restProps}\n          />\n        </label>\n      </div>\n    )\n  },\n)\n\nInput.displayName = 'Input'\n","import React, { FC, memo, useEffect } from 'react'\nimport s from './Setter.module.css'\nimport { Input } from '../Input'\nimport { Button } from '../Button'\nimport {\n  setCounterAC,\n  setErrorAC,\n  setMaxCounterAC,\n  setMinCounterAC,\n} from '../../bus/action'\nimport { StateType } from '../../bus/reducer'\nimport { ActionTypes } from '../../bus/types'\n\ntype SetterPropsType = {\n  className?: string\n  state: StateType\n  dispatch: (props: ActionTypes) => void\n}\n\nexport const Setter: FC<SetterPropsType> = memo(\n  ({ className, state, dispatch }) => {\n    const { isSetterActive, error, minCounter, maxCounter } = state\n\n    useEffect(() => {\n      if (minCounter < 0 || minCounter >= maxCounter) {\n        dispatch(setErrorAC(true))\n      } else {\n        dispatch(setErrorAC(false))\n      }\n    }, [minCounter, maxCounter, dispatch])\n\n    const setMinCounter = (payload: string) => {\n      dispatch(setMinCounterAC(payload))\n    }\n\n    const setMaxCounter = (payload: string) => {\n      dispatch(setMaxCounterAC(payload))\n    }\n\n    const setCounter = () => {\n      dispatch(setCounterAC())\n    }\n\n    const setterClassName = `${s.setter} jumbotron p-4 ${\n      className ? className : ''\n    }`\n\n    return (\n      <div className={setterClassName}>\n        <div className=\"mb-auto\">\n          <Input\n            type=\"number\"\n            title=\"max value:\"\n            onChangeText={setMaxCounter}\n            value={maxCounter}\n            error={error}\n          />\n          <Input\n            type=\"number\"\n            title=\"start value:\"\n            onChangeText={setMinCounter}\n            value={minCounter}\n            error={error}\n          />\n        </div>\n        <hr className=\"my-4 w-100\" />\n        <div className=\"btn-group btn-group-lg w-100\">\n          <Button\n            className=\"btn-info w-50\"\n            disabled={!isSetterActive || error}\n            onClick={setCounter}\n          >\n            Set\n          </Button>\n        </div>\n      </div>\n    )\n  },\n)\n\nSetter.displayName = 'Setter'\n","import React, { useEffect, useReducer } from 'react'\nimport { Counter } from './components/Counter'\nimport { initialState, reducer } from './bus/reducer'\nimport './App.css'\nimport { Setter } from './components/Setter'\n\nfunction App() {\n  const localState = localStorage.getItem('counter')\n  const preloadedState = (localState && JSON.parse(localState)) || initialState\n\n  const [state, dispatch] = useReducer(reducer, preloadedState)\n\n  const { isSetterActive } = state\n\n  useEffect(() => {\n    localStorage.setItem('counter', JSON.stringify(state))\n  }, [state])\n\n  const colClassName = 'col col-sm col-md-6 ml-3 mr-3 d-flex flex-column'\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          {isSetterActive ? (\n            <Setter\n              className={colClassName}\n              state={state}\n              dispatch={dispatch}\n            />\n          ) : (\n            <Counter\n              className={colClassName}\n              state={state}\n              dispatch={dispatch}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}